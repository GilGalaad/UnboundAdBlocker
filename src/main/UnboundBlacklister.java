package main;

import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;

public class UnboundBlacklister {

    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private static final String SOURCE_LIST = "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts";
    private static final String WHITE_LIST_FILENAME = "white.list";
    private static HashSet<String> blackSet = new HashSet<>();
    private static ArrayList<String> blackList = new ArrayList<>();
    private static ArrayList<String> whiteList = new ArrayList<>();

    public static void main(String[] args) {
        System.out.println("# " + sdf.format(new Date()));

        // determining file location
        Path jarPath = null;
        try {
            jarPath = getJarLocation();
        } catch (URISyntaxException ex) {
            // should never happen because URL is generated by JDK itself
            log("# Unexpected URISyntaxException while getting jar location - " + ex.getMessage());
            return;
        }

        // locating optional whitelist
        Path whiteListPath = jarPath.resolve(WHITE_LIST_FILENAME);
        System.out.println(whiteListPath);
        if (Files.exists(whiteListPath) && Files.isRegularFile(whiteListPath) && Files.isReadable(whiteListPath)) {
            parseWhitelist(whiteListPath);
        } else {
            log("# Optional whitelist not found");
        }

    }

    private static void parseWhitelist(Path path) {

    }

    private static void log(String msg) {
        System.out.println(msg);
    }

    private static Path getJarLocation() throws URISyntaxException {
        Path jarPath = Paths.get(UnboundBlacklister.class.getProtectionDomain().getCodeSource().getLocation().toURI());
        if (Files.isRegularFile(jarPath)) {
            return jarPath.getParent();
        } else {
            return jarPath;
        }
    }

}
